/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ReverseRequest } from "./ReverseRequest";
import { ReverseRequestCountArgs } from "./ReverseRequestCountArgs";
import { ReverseRequestFindManyArgs } from "./ReverseRequestFindManyArgs";
import { ReverseRequestFindUniqueArgs } from "./ReverseRequestFindUniqueArgs";
import { CreateReverseRequestArgs } from "./CreateReverseRequestArgs";
import { UpdateReverseRequestArgs } from "./UpdateReverseRequestArgs";
import { DeleteReverseRequestArgs } from "./DeleteReverseRequestArgs";
import { Transaction } from "../../transaction/base/Transaction";
import { ReverseRequestService } from "../reverseRequest.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ReverseRequest)
export class ReverseRequestResolverBase {
  constructor(
    protected readonly service: ReverseRequestService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ReverseRequest",
    action: "read",
    possession: "any",
  })
  async _reverseRequestsMeta(
    @graphql.Args() args: ReverseRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ReverseRequest])
  @nestAccessControl.UseRoles({
    resource: "ReverseRequest",
    action: "read",
    possession: "any",
  })
  async reverseRequests(
    @graphql.Args() args: ReverseRequestFindManyArgs
  ): Promise<ReverseRequest[]> {
    return this.service.reverseRequests(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ReverseRequest, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ReverseRequest",
    action: "read",
    possession: "own",
  })
  async reverseRequest(
    @graphql.Args() args: ReverseRequestFindUniqueArgs
  ): Promise<ReverseRequest | null> {
    const result = await this.service.reverseRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ReverseRequest)
  @nestAccessControl.UseRoles({
    resource: "ReverseRequest",
    action: "create",
    possession: "any",
  })
  async createReverseRequest(
    @graphql.Args() args: CreateReverseRequestArgs
  ): Promise<ReverseRequest> {
    return await this.service.createReverseRequest({
      ...args,
      data: {
        ...args.data,

        transaction: args.data.transaction
          ? {
              connect: args.data.transaction,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ReverseRequest)
  @nestAccessControl.UseRoles({
    resource: "ReverseRequest",
    action: "update",
    possession: "any",
  })
  async updateReverseRequest(
    @graphql.Args() args: UpdateReverseRequestArgs
  ): Promise<ReverseRequest | null> {
    try {
      return await this.service.updateReverseRequest({
        ...args,
        data: {
          ...args.data,

          transaction: args.data.transaction
            ? {
                connect: args.data.transaction,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ReverseRequest)
  @nestAccessControl.UseRoles({
    resource: "ReverseRequest",
    action: "delete",
    possession: "any",
  })
  async deleteReverseRequest(
    @graphql.Args() args: DeleteReverseRequestArgs
  ): Promise<ReverseRequest | null> {
    try {
      return await this.service.deleteReverseRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Transaction, {
    nullable: true,
    name: "transaction",
  })
  @nestAccessControl.UseRoles({
    resource: "Transaction",
    action: "read",
    possession: "any",
  })
  async getTransaction(
    @graphql.Parent() parent: ReverseRequest
  ): Promise<Transaction | null> {
    const result = await this.service.getTransaction(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
