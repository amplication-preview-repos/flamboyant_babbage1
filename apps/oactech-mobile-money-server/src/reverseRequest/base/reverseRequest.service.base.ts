/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ReverseRequest as PrismaReverseRequest,
  Transaction as PrismaTransaction,
} from "@prisma/client";

export class ReverseRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ReverseRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.reverseRequest.count(args);
  }

  async reverseRequests(
    args: Prisma.ReverseRequestFindManyArgs
  ): Promise<PrismaReverseRequest[]> {
    return this.prisma.reverseRequest.findMany(args);
  }
  async reverseRequest(
    args: Prisma.ReverseRequestFindUniqueArgs
  ): Promise<PrismaReverseRequest | null> {
    return this.prisma.reverseRequest.findUnique(args);
  }
  async createReverseRequest(
    args: Prisma.ReverseRequestCreateArgs
  ): Promise<PrismaReverseRequest> {
    return this.prisma.reverseRequest.create(args);
  }
  async updateReverseRequest(
    args: Prisma.ReverseRequestUpdateArgs
  ): Promise<PrismaReverseRequest> {
    return this.prisma.reverseRequest.update(args);
  }
  async deleteReverseRequest(
    args: Prisma.ReverseRequestDeleteArgs
  ): Promise<PrismaReverseRequest> {
    return this.prisma.reverseRequest.delete(args);
  }

  async getTransaction(parentId: string): Promise<PrismaTransaction | null> {
    return this.prisma.reverseRequest
      .findUnique({
        where: { id: parentId },
      })
      .transaction();
  }
}
